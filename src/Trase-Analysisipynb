{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"L4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"egy7kXFSphko"},"outputs":[],"source":["!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n","!pip install x-transformers\n","!pip install matplotlib\n","!pip install einops\n","!pip install wandb\n","!pip install scipy\n","!pip install pandas\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os\n","import csv\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","from scipy.ndimage import uniform_filter1d\n","from scipy.signal import butter, filtfilt\n","from torch.utils.data import DataLoader\n","import sys\n","import pandas as pd\n","\n","import numpy as np\n","\n","import re\n","import pickle\n","\n","sys.path.append('/content/drive/MyDrive/realistic-imu/src')\n","\n","from trase_dataset import TraseDataset\n","from trase import Trase, TraseLoss\n","\n","if 'ipykernel' in sys.modules:\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm\n","\n","data_path = \"/content/drive/MyDrive/beyondamass/data/realistic-imu-dataset/\"\n","model_path = \"/content/drive/MyDrive/beyondamass/src/weights/best_total_var_0_spike.ptrom\"\n","\n","train_path = os.path.join(data_path, \"train.pkl\")\n","dev_path = os.path.join(data_path, \"dev.pkl\")\n","\n","identity_collate = lambda batch: batch\n","\n","train_dataset = TraseDataset(train_path)\n","dev_dataset = TraseDataset(dev_path)\n","\n","train_loader = DataLoader(train_dataset, batch_size=1, shuffle=False, collate_fn=identity_collate)\n","dev_loader = DataLoader(dev_dataset, batch_size=1, shuffle=False, collate_fn=identity_collate)\n","\n","device = torch.device(\"cuda\")\n","\n","fs = 60\n","cutoff =  8\n","b, a = butter(10, cutoff / (fs / 2), btype='lowpass')\n","\n","NIMBLE_BODY_NODES_ALL = [\n","    'pelvis',\n","    'femur_r',\n","    'tibia_r',\n","     'talus_r',\n","     'calcn_r',\n","     'toes_r',\n","     'femur_l',\n","     'tibia_l',\n","     'talus_l',\n","     'calcn_l',\n","     'toes_l',\n","     'lumbar_body',\n","     'thorax',\n","     'head',\n","     'scapula_r',\n","     'humerus_r',\n","     'ulna_r',\n","     'radius_r',\n","     'hand_r',\n","     'scapula_l',\n","     'humerus_l',\n","     'ulna_l',\n","     'radius_l',\n","     'hand_l'\n","]\n","\n","body_node_to_idx = {node: idx for idx, node in enumerate(NIMBLE_BODY_NODES_ALL)}\n"]},{"cell_type":"code","source":["np.argmax([dev_dataset[i][\"inputs\"].shape[1] for i in range(len(dev_dataset))])"],"metadata":{"id":"rTj1kEwIvMK0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["[dev_dataset[i][\"origin\"] for i in range(len(dev_dataset))]"],"metadata":{"id":"LhnrW_RLa6Zl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dev_dataset[16][\"inputs\"].shape\n","dev_dataset[15][\"origin\"]"],"metadata":{"id":"ZCIqjgwZ1w3b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["D_MODEL = 2048\n","FEED_FORWARD_DIM = 2048\n","INPUT_EMBEDDING_DIM = 408\n","HEADS = 8\n","NUM_ENCODERS = 6\n","TOTAL_VAR_WEIGHT = 1e-2\n","\n","state_dict = torch.load(model_path)\n","\n","model = Trase(d_model=D_MODEL,\n","            inp_emb_dim=INPUT_EMBEDDING_DIM,\n","            device=device,\n","            num_encoders=NUM_ENCODERS,\n","            dim_feed_forward=FEED_FORWARD_DIM,\n","            heads=HEADS).to(device)\n","\n","orig_state_dict = torch.load(model_path, map_location=device)\n","\n","stripped_state_dict = {\n","    k.replace(\"_orig_mod.\", \"\"): v for k, v in orig_state_dict.items()\n","}\n","\n","model.load_state_dict(stripped_state_dict)\n","\n","criterion = TraseLoss(total_var_weight=TOTAL_VAR_WEIGHT)\n","\n","model.eval()"],"metadata":{"id":"BKmO0p5M-I4f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Just checking if I uploaded the correct model"],"metadata":{"id":"7sG5i5HTGMwj"}},{"cell_type":"code","source":["curr_loss = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)\n","\n","    loss = criterion(kinematics=kinematics * mask * weights,\n","                    acc_mean = acc_output * mask * weights,\n","                    acc_std = acc_std * weights,\n","                    real_acc = real_acc * mask * weights,\n","                    gyro_mean = gyro_output,\n","                    gyro_std = gyro_std,\n","                    real_gyro = real_angular_vel,\n","                    include_gyro = real_angular_vel is not None)\n","\n","\n","    curr_loss += loss.item()\n","\n","print(curr_loss / len(dev_loader))"],"metadata":{"id":"yYuS6dAWBRmE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Are the accelerations and predicted spring kinematics doing what I designed them to do?\n"],"metadata":{"id":"OJKoKRjNG1lr"}},{"cell_type":"code","source":["def plot_time_series(series, title=\"Time Series Plot\", xlabel=\"Time\", ylabel=\"Value\", figsize=(12, 6)):\n","    plt.figure(figsize=figsize)\n","    plt.plot(series, label=\"Time Series\", color=\"blue\", linewidth=2)\n","    plt.title(title, fontsize=16)\n","    plt.xlabel(xlabel, fontsize=14)\n","    plt.ylabel(ylabel, fontsize=14)\n","    plt.grid(alpha=0.3, linestyle='--')\n","    # plt.ylim(-10, 10)\n","    plt.tight_layout()\n","    plt.legend(fontsize=12)\n","    plt.show()\n","\n","def plot_time_series_overlay(series_list, labels=None, title=\"Overlayed Time Series Plot\",\n","                              xlabel=\"Time\", ylabel=\"Value\", figsize=(12, 6),\n","                              colors=None, alpha=0.2, linewidth=2):\n","    \"\"\"\n","    Plots multiple time series with transparency to visualize overlaps.\n","\n","    Args:\n","        series_list (list of array-like): List of time series arrays to plot.\n","        labels (list of str, optional): Labels for each series.\n","        title (str): Plot title.\n","        xlabel (str): X-axis label.\n","        ylabel (str): Y-axis label.\n","        figsize (tuple): Figure size.\n","        colors (list of str, optional): List of colors for each series.\n","        alpha (float): Transparency of each time series line.\n","        linewidth (float): Width of the lines.\n","    \"\"\"\n","    plt.figure(figsize=figsize)\n","\n","    n = len(series_list)\n","    time = np.arange(len(series_list[0]))  # Assumes all series are same length\n","\n","    for i, series in enumerate(series_list):\n","        color = colors[i] if colors else None\n","        label = labels[i] if labels else None\n","        plt.plot(time, series, label=label, color=color, linewidth=linewidth, alpha=alpha)\n","\n","    if labels:\n","        plt.legend(fontsize=12)\n","\n","    plt.xlabel(xlabel, fontsize=14)\n","    plt.ylabel(ylabel, fontsize=14)\n","    plt.grid(alpha=0.3, linestyle='--')\n","    plt.tight_layout()\n","    plt.show()\n","\n","example_data = dev_dataset[0]\n","part = \"pelvis\"\n","time_range = slice(2000, 2500)\n","\n","mocap_data = example_data[\"inputs\"]\n","real_acc = example_data[\"accelerations_output\"]\n","real_angular_vel = example_data[\"angular_velocities_output\"] if example_data[\"angular_velocities_output\"] is not None else None\n","mask = example_data[\"output_mask\"].T\n","weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)"],"metadata":{"id":"M0sx0LaoH4cW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["acc_pred_vs_real = [acc_output.detach().cpu()[body_node_to_idx[part] * 3 + 2, time_range] + kinematics.detach().cpu()[body_node_to_idx[part] * 3 + 2, time_range],\n","                    real_acc.detach().cpu()[body_node_to_idx[part] * 3 + 2, time_range],\n","                    mocap_data.detach().cpu()[0, time_range, body_node_to_idx[part] * 17 + 2]\n","                    ]\n","plot_time_series_overlay(acc_pred_vs_real, labels=[\"Predicted\", \"Ground Truth\", \"Synthetic\"], ylabel=\"Acceelration\")"],"metadata":{"id":"hW1ghWvRN7FR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: Do the same thing that I did to plot the overlay graphs here using the same function but with the gyro output\n","\n","gyro_pred_vs_real = [gyro_output.detach().cpu()[body_node_to_idx[part] * 3 + 1, time_range],\n","                     real_angular_vel.detach().cpu()[body_node_to_idx[part] * 3 + 1, time_range],\n","                     mocap_data.detach().cpu()[0, time_range, body_node_to_idx[part] * 17 + 1 + 3]\n","                     ]\n","plot_time_series_overlay(gyro_pred_vs_real, labels=[\"Predicted\", \"Ground Truth\", \"Synthetic\"], ylabel=\"Angular Velocity\")\n"],"metadata":{"id":"5PXHgCPxKNIL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Trase Model Performance"],"metadata":{"id":"blrHBndVP0rm"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)\n","\n","    acc_pred = (acc_output.detach() + kinematics.detach()) * mask\n","    acc_pred = acc_pred.cpu().numpy()\n","\n","    real_acc = real_acc * mask\n","    real_acc = real_acc.cpu().numpy()\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = gyro_output.detach().cpu().numpy()\n","        real_gyro = real_angular_vel.detach().cpu().numpy()\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")\n"],"metadata":{"id":"Cyh0exQd__Uu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Nothing but a central difference"],"metadata":{"id":"4zz2-jijP71L"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","\n","    acc_pred = mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T\n","    acc_pred = acc_pred.cpu().numpy()\n","\n","    real_acc = real_acc * mask\n","    real_acc = real_acc.cpu().numpy()\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy()\n","        real_gyro = real_angular_vel.detach().cpu().numpy()\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")"],"metadata":{"id":"xpK894NFFTW5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Butterworth Filter"],"metadata":{"id":"wRfmdGlOQDQB"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","\n","    acc_pred = filtfilt(b, a, mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T.detach().cpu().numpy())\n","\n","    real_acc = real_acc * mask\n","    real_acc = filtfilt(b, a, real_acc.cpu().numpy())\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = filtfilt(b, a, mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy())\n","        real_gyro = filtfilt(b, a, real_angular_vel.detach().cpu().numpy())\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")"],"metadata":{"id":"Qo5TBSFwMVGz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Exponential Moving average and Savitsky Golay Filter"],"metadata":{"id":"RvqQwymxRDQs"}},{"cell_type":"code","source":["# prompt: Do the same thing as above for a savitsky golay filter and and an exponential moving average with a window of 11 to calculate the mean squared error. Be sure to apply the filter to both synthetic and real data\n","\n","from scipy.signal import savgol_filter\n","\n","def exponential_moving_average(data, window_size):\n","  \"\"\"Calculates the Exponential Moving Average of a time series.\"\"\"\n","  ema = np.zeros_like(data)\n","  alpha = 2 / (window_size + 1)\n","  ema[0] = data[0]\n","  for i in range(1, len(data)):\n","    ema[i] = alpha * data[i] + (1 - alpha) * ema[i - 1]\n","  return ema\n","\n","# Exponential Moving Average and Savitsky Golay Filter\n","acc_mse_ema = 0\n","gyro_mse_ema = 0\n","acc_exps_ema = 0\n","gyro_exps_ema = 0\n","\n","acc_mse_savgol = 0\n","gyro_mse_savgol = 0\n","acc_exps_savgol = 0\n","gyro_exps_savgol = 0\n","\n","window_size = 11\n","savgol_window = 11 # Must be odd\n","savgol_polyorder = 2\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    # Apply EMA to synthetic data (from mocap_data)\n","    synthetic_acc = mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T.detach().cpu().numpy()\n","    ema_acc_pred = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=synthetic_acc)\n","\n","    # Apply EMA to real data\n","    real_acc_masked = real_acc * mask\n","    real_acc_masked_np = real_acc_masked.cpu().numpy()\n","    # We need to handle the masked values correctly for EMA. A simple approach\n","    # is to only calculate EMA for unmasked sections, but for simplicity here\n","    # we'll apply to the potentially masked data. A more sophisticated approach\n","    # might involve splitting into unmasked segments.\n","    ema_real_acc = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=real_acc_masked_np)\n","\n","    # Calculate MSE for EMA\n","    acc_diff_ema = ema_acc_pred - ema_real_acc\n","    acc_sq_ema = acc_diff_ema ** 2\n","\n","    acc_exps_ema += acc_sq_ema.size\n","    acc_mse_ema += np.sum(acc_sq_ema)\n","\n","    if real_angular_vel is not None:\n","        synthetic_gyro = mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy()\n","        ema_gyro_pred = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=synthetic_gyro)\n","\n","        real_gyro_np = real_angular_vel.detach().cpu().numpy()\n","        ema_real_gyro = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=real_gyro_np)\n","\n","        diff_ema = ema_gyro_pred - ema_real_gyro\n","        sq_ema = diff_ema ** 2\n","\n","        gyro_exps_ema += sq_ema.size\n","        gyro_mse_ema += np.sum(sq_ema)\n","\n","    # Apply Savitsky Golay to synthetic data\n","    savgol_acc_pred = savgol_filter(synthetic_acc, savgol_window, savgol_polyorder, axis=1)\n","\n","    # Apply Savitsky Golay to real data\n","    # Savgol_filter handles NaN values if present, which might occur due to masking.\n","    savgol_real_acc = savgol_filter(real_acc_masked_np, savgol_window, savgol_polyorder, axis=1)\n","\n","    # Calculate MSE for Savitsky Golay\n","    acc_diff_savgol = savgol_acc_pred - savgol_real_acc\n","    acc_sq_savgol = acc_diff_savgol ** 2\n","\n","    acc_exps_savgol += acc_sq_savgol.size\n","    acc_mse_savgol += np.sum(acc_sq_savgol)\n","\n","    if real_angular_vel is not None:\n","        savgol_gyro_pred = savgol_filter(synthetic_gyro, savgol_window, savgol_polyorder, axis=1)\n","        savgol_real_gyro = savgol_filter(real_gyro_np, savgol_window, savgol_polyorder, axis=1)\n","\n","        diff_savgol = savgol_gyro_pred - savgol_real_gyro\n","        sq_savgol = diff_savgol ** 2\n","\n","        gyro_exps_savgol += sq_savgol.size\n","        gyro_mse_savgol += np.sum(sq_savgol)\n","\n","acc_mse_ema /= acc_exps_ema\n","gyro_mse_ema /= gyro_exps_ema\n","\n","acc_mse_savgol /= acc_exps_savgol\n","gyro_mse_savgol /= gyro_exps_savgol\n","\n","\n","print(f\"EMA Acceleration MSE {acc_mse_ema}\")\n","print(f\"EMA Angular Velocity MSE {gyro_mse_ema}\")\n","print(f\"Savitsky Golay Acceleration MSE {acc_mse_savgol}\")\n","print(f\"Savitsky Golay Angular Velocity MSE {gyro_mse_savgol}\")"],"metadata":{"id":"7oenbDsqX2d2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: get the correlation coefficients for the gyro to real and acc pred to real acc\n","\n","from scipy.stats import pearsonr\n","\n","# Assuming acc_pred_vs_real and gyro_pred_vs_real are lists of numpy arrays or tensors\n","# and the first element is the predicted series, the second is the real series.\n","\n","# Calculate correlation for acc pred vs real acc\n","acc_pred = acc_pred_vs_real[0].squeeze() # Ensure 1D\n","real_acc_series = acc_pred_vs_real[1].squeeze() # Ensure 1D\n","\n","# Ensure both series are the same length\n","min_len = min(len(acc_pred), len(real_acc_series))\n","acc_pred = acc_pred[:min_len]\n","real_acc_series = real_acc_series[:min_len]\n","\n","\n","# Handle potential NaN or inf values\n","valid_indices_acc = np.isfinite(acc_pred) & np.isfinite(real_acc_series)\n","acc_pred_valid = acc_pred[valid_indices_acc]\n","real_acc_series_valid = real_acc_series[valid_indices_acc]\n","\n","if len(acc_pred_valid) > 1:\n","    correlation_acc, _ = pearsonr(acc_pred_valid, real_acc_series_valid)\n","    print(f\"Correlation coefficient (Acc Pred vs Real Acc): {correlation_acc}\")\n","else:\n","    print(\"Cannot compute correlation for Acc Pred vs Real Acc: Not enough valid data points.\")\n","\n","\n","# Calculate correlation for gyro pred vs real gyro\n","if real_angular_vel is not None:\n","    gyro_pred = gyro_pred_vs_real[0].squeeze() # Ensure 1D\n","    real_gyro_series = gyro_pred_vs_real[1].squeeze() # Ensure 1D\n","\n","    # Ensure both series are the same length\n","    min_len = min(len(gyro_pred), len(real_gyro_series))\n","    gyro_pred = gyro_pred[:min_len]\n","    real_gyro_series = real_gyro_series[:min_len]\n","\n","    # Handle potential NaN or inf values\n","    valid_indices_gyro = np.isfinite(gyro_pred) & np.isfinite(real_gyro_series)\n","    gyro_pred_valid = gyro_pred[valid_indices_gyro]\n","    real_gyro_series_valid = real_gyro_series[valid_indices_gyro]\n","\n","    if len(gyro_pred_valid) > 1:\n","        correlation_gyro, _ = pearsonr(gyro_pred_valid, real_gyro_series_valid)\n","        print(f\"Correlation coefficient (Gyro Pred vs Real Gyro): {correlation_gyro}\")\n","    else:\n","         print(\"Cannot compute correlation for Gyro Pred vs Real Gyro: Not enough valid data points.\")\n","else:\n","    print(\"Real angular velocity data is not available, cannot compute gyro correlation.\")\n","\n"],"metadata":{"id":"el_6UIF1LzJZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: print the mean of gyro std and acc std\n","\n","mean_acc_std = torch.mean(acc_std)\n","mean_gyro_std = torch.mean(gyro_std)\n","\n","print(f\"Mean of acceleration std: {mean_acc_std.item()}\")\n","print(f\"Mean of gyroscope std: {mean_gyro_std.item()}\")\n"],"metadata":{"id":"pI6AgeN4M6PX"},"execution_count":null,"outputs":[]}]}