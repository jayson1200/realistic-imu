{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"egy7kXFSphko","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749602436804,"user_tz":420,"elapsed":184639,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"8bb68d0b-bd4b-420e-c5d1-40925bf5c9d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://download.pytorch.org/whl/cu118\n","Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n","Requirement already satisfied: torchaudio in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.14.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n","INFO: pip is looking at multiple versions of torch to determine which version is compatible with other requirements. This could take a while.\n","Collecting torch\n","  Downloading https://download.pytorch.org/whl/cu118/torch-2.7.1%2Bcu118-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (28 kB)\n","Collecting sympy>=1.13.3 (from torch)\n","  Downloading https://download.pytorch.org/whl/sympy-1.13.3-py3-none-any.whl.metadata (12 kB)\n","Collecting nvidia-cuda-nvrtc-cu11==11.8.89 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cuda_nvrtc_cu11-11.8.89-py3-none-manylinux1_x86_64.whl (23.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m23.2/23.2 MB\u001b[0m \u001b[31m109.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cuda-runtime-cu11==11.8.89 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cuda_runtime_cu11-11.8.89-py3-none-manylinux1_x86_64.whl (875 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m875.6/875.6 kB\u001b[0m \u001b[31m46.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cuda-cupti-cu11==11.8.87 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cuda_cupti_cu11-11.8.87-py3-none-manylinux1_x86_64.whl (13.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.1/13.1 MB\u001b[0m \u001b[31m132.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cudnn-cu11==9.1.0.70 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cudnn_cu11-9.1.0.70-py3-none-manylinux2014_x86_64.whl (663.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m663.9/663.9 MB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cublas-cu11==11.11.3.6 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cublas_cu11-11.11.3.6-py3-none-manylinux1_x86_64.whl (417.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m417.9/417.9 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cufft-cu11==10.9.0.58 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cufft_cu11-10.9.0.58-py3-none-manylinux1_x86_64.whl (168.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m168.4/168.4 MB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-curand-cu11==10.3.0.86 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_curand_cu11-10.3.0.86-py3-none-manylinux1_x86_64.whl (58.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.1/58.1 MB\u001b[0m \u001b[31m41.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cusolver-cu11==11.4.1.48 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cusolver_cu11-11.4.1.48-py3-none-manylinux1_x86_64.whl (128.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.2/128.2 MB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-cusparse-cu11==11.7.5.86 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_cusparse_cu11-11.7.5.86-py3-none-manylinux1_x86_64.whl (204.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m204.1/204.1 MB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-nccl-cu11==2.21.5 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_nccl_cu11-2.21.5-py3-none-manylinux2014_x86_64.whl (147.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m147.8/147.8 MB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting nvidia-nvtx-cu11==11.8.86 (from torch)\n","  Downloading https://download.pytorch.org/whl/cu118/nvidia_nvtx_cu11-11.8.86-py3-none-manylinux1_x86_64.whl (99 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.1/99.1 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting triton==3.3.1 (from torch)\n","  Downloading https://download.pytorch.org/whl/triton-3.3.1-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: setuptools>=40.8.0 in /usr/local/lib/python3.11/dist-packages (from triton==3.3.1->torch) (75.2.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.0.2)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.2.1)\n","Collecting torch\n","  Downloading https://download.pytorch.org/whl/cu118/torch-2.6.0%2Bcu118-cp311-cp311-linux_x86_64.whl.metadata (27 kB)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n","Downloading https://download.pytorch.org/whl/cu118/torch-2.6.0%2Bcu118-cp311-cp311-linux_x86_64.whl (848.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m848.7/848.7 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: nvidia-nvtx-cu11, nvidia-nccl-cu11, nvidia-cusparse-cu11, nvidia-curand-cu11, nvidia-cufft-cu11, nvidia-cuda-runtime-cu11, nvidia-cuda-nvrtc-cu11, nvidia-cuda-cupti-cu11, nvidia-cublas-cu11, nvidia-cusolver-cu11, nvidia-cudnn-cu11, torch\n","  Attempting uninstall: torch\n","    Found existing installation: torch 2.6.0+cu124\n","    Uninstalling torch-2.6.0+cu124:\n","      Successfully uninstalled torch-2.6.0+cu124\n","Successfully installed nvidia-cublas-cu11-11.11.3.6 nvidia-cuda-cupti-cu11-11.8.87 nvidia-cuda-nvrtc-cu11-11.8.89 nvidia-cuda-runtime-cu11-11.8.89 nvidia-cudnn-cu11-9.1.0.70 nvidia-cufft-cu11-10.9.0.58 nvidia-curand-cu11-10.3.0.86 nvidia-cusolver-cu11-11.4.1.48 nvidia-cusparse-cu11-11.7.5.86 nvidia-nccl-cu11-2.21.5 nvidia-nvtx-cu11-11.8.86 torch-2.6.0+cu118\n","Collecting x-transformers\n","  Downloading x_transformers-2.3.12-py3-none-any.whl.metadata (89 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.0/89.0 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: einops>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from x-transformers) (0.8.1)\n","Collecting einx>=0.3.0 (from x-transformers)\n","  Downloading einx-0.3.0-py3-none-any.whl.metadata (6.9 kB)\n","Collecting loguru (from x-transformers)\n","  Downloading loguru-0.7.3-py3-none-any.whl.metadata (22 kB)\n","Requirement already satisfied: packaging>=21.0 in /usr/local/lib/python3.11/dist-packages (from x-transformers) (24.2)\n","Requirement already satisfied: torch>=2.0 in /usr/local/lib/python3.11/dist-packages (from x-transformers) (2.6.0+cu118)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from einx>=0.3.0->x-transformers) (2.0.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.11/dist-packages (from einx>=0.3.0->x-transformers) (1.13.1)\n","Requirement already satisfied: frozendict in /usr/local/lib/python3.11/dist-packages (from einx>=0.3.0->x-transformers) (2.4.6)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (3.18.0)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (4.14.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (3.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (2025.3.2)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu11==11.8.89 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.8.89)\n","Requirement already satisfied: nvidia-cuda-runtime-cu11==11.8.89 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.8.89)\n","Requirement already satisfied: nvidia-cuda-cupti-cu11==11.8.87 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.8.87)\n","Requirement already satisfied: nvidia-cudnn-cu11==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (9.1.0.70)\n","Requirement already satisfied: nvidia-cublas-cu11==11.11.3.6 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.11.3.6)\n","Requirement already satisfied: nvidia-cufft-cu11==10.9.0.58 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (10.9.0.58)\n","Requirement already satisfied: nvidia-curand-cu11==10.3.0.86 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (10.3.0.86)\n","Requirement already satisfied: nvidia-cusolver-cu11==11.4.1.48 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.4.1.48)\n","Requirement already satisfied: nvidia-cusparse-cu11==11.7.5.86 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.7.5.86)\n","Requirement already satisfied: nvidia-nccl-cu11==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu11==11.8.86 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (11.8.86)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0->x-transformers) (3.2.0)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy->einx>=0.3.0->x-transformers) (1.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0->x-transformers) (3.0.2)\n","Downloading x_transformers-2.3.12-py3-none-any.whl (84 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.0/84.0 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading einx-0.3.0-py3-none-any.whl (102 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.0/103.0 kB\u001b[0m \u001b[31m11.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading loguru-0.7.3-py3-none-any.whl (61 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.6/61.6 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: loguru, einx, x-transformers\n","Successfully installed einx-0.3.0 loguru-0.7.3 x-transformers-2.3.12\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.1)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n","Requirement already satisfied: einops in /usr/local/lib/python3.11/dist-packages (0.8.1)\n","Requirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (0.19.11)\n","Requirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb) (8.2.1)\n","Requirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (0.4.0)\n","Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.1.44)\n","Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb) (4.3.8)\n","Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (5.29.5)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (5.9.5)\n","Requirement already satisfied: pydantic<3 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.11.5)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb) (6.0.2)\n","Requirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.32.3)\n","Requirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.29.1)\n","Requirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb) (1.3.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from wandb) (75.2.0)\n","Requirement already satisfied: typing-extensions<5,>=4.4 in /usr/local/lib/python3.11/dist-packages (from wandb) (4.14.0)\n","Requirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from docker-pycreds>=0.4.0->wandb) (1.17.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.12)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.4.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2025.4.26)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.3)\n","Requirement already satisfied: numpy<2.5,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from scipy) (2.0.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Mounted at /content/drive\n"]}],"source":["!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n","!pip install x-transformers\n","!pip install matplotlib\n","!pip install einops\n","!pip install wandb\n","!pip install scipy\n","!pip install pandas\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os\n","import csv\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","from scipy.ndimage import uniform_filter1d\n","from scipy.signal import butter, filtfilt\n","from torch.utils.data import DataLoader\n","import sys\n","import pandas as pd\n","\n","import numpy as np\n","\n","import re\n","import pickle\n","\n","sys.path.append('/content/drive/MyDrive/realistic-imu/src')\n","\n","from trase_dataset import TraseDataset\n","from trase import Trase, TraseLoss\n","\n","if 'ipykernel' in sys.modules:\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm\n","\n","data_path = \"/content/drive/MyDrive/beyondamass/data/realistic-imu-dataset/\"\n","model_path = \"/content/drive/MyDrive/beyondamass/src/weights/trase_wo_total.ptrom\"\n","\n","train_path = os.path.join(data_path, \"train.pkl\")\n","dev_path = os.path.join(data_path, \"dev.pkl\")\n","\n","identity_collate = lambda batch: batch\n","\n","train_dataset = TraseDataset(train_path)\n","dev_dataset = TraseDataset(dev_path)\n","\n","train_loader = DataLoader(train_dataset, batch_size=1, shuffle=False, collate_fn=identity_collate)\n","dev_loader = DataLoader(dev_dataset, batch_size=1, shuffle=False, collate_fn=identity_collate)\n","\n","device = torch.device(\"cuda\")\n","\n","fs = 60\n","cutoff =  8\n","b, a = butter(10, cutoff / (fs / 2), btype='lowpass')\n","\n","NIMBLE_BODY_NODES_ALL = [\n","    'pelvis',\n","    'femur_r',\n","    'tibia_r',\n","     'talus_r',\n","     'calcn_r',\n","     'toes_r',\n","     'femur_l',\n","     'tibia_l',\n","     'talus_l',\n","     'calcn_l',\n","     'toes_l',\n","     'lumbar_body',\n","     'thorax',\n","     'head',\n","     'scapula_r',\n","     'humerus_r',\n","     'ulna_r',\n","     'radius_r',\n","     'hand_r',\n","     'scapula_l',\n","     'humerus_l',\n","     'ulna_l',\n","     'radius_l',\n","     'hand_l'\n","]\n","\n","body_node_to_idx = {node: idx for idx, node in enumerate(NIMBLE_BODY_NODES_ALL)}\n"]},{"cell_type":"code","source":["np.argmax([dev_dataset[i][\"inputs\"].shape[1] for i in range(len(dev_dataset))])"],"metadata":{"id":"rTj1kEwIvMK0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749602436940,"user_tz":420,"elapsed":123,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"ada813da-6430-4c5b-a03b-4b176a5eddc7"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(6)"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["[dev_dataset[i][\"origin\"] for i in range(len(dev_dataset))]"],"metadata":{"id":"LhnrW_RLa6Zl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749602437121,"user_tz":420,"elapsed":149,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"dc5bcac8-7b6b-4ab4-8753-f9f3b00527b8"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['DIPSubject',\n"," 'DIPSubject',\n"," 'DIPSubject',\n"," 'DIPSubject',\n"," 'DIPSubject',\n"," 'UIPSubject',\n"," 'UIPSubject',\n"," 'UIPSubject']"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["dev_dataset[16][\"inputs\"].shape\n","dev_dataset[15][\"origin\"]"],"metadata":{"id":"ZCIqjgwZ1w3b","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"error","timestamp":1749602437876,"user_tz":420,"elapsed":753,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"b90e3a55-7929-4da5-c1a8-375103bbbf06"},"execution_count":4,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"list index out of range","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-949871584>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdev_dataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"inputs\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdev_dataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"origin\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/realistic-imu/src/trase_dataset.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"inputs\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0maccelerations_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"accelerations_output\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]},{"cell_type":"code","source":["D_MODEL = 2048\n","FEED_FORWARD_DIM = 2048\n","INPUT_EMBEDDING_DIM = 408\n","HEADS = 8\n","NUM_ENCODERS = 6\n","TOTAL_VAR_WEIGHT = 1e-2\n","\n","state_dict = torch.load(model_path)\n","\n","model = Trase(d_model=D_MODEL,\n","            inp_emb_dim=INPUT_EMBEDDING_DIM,\n","            device=device,\n","            num_encoders=NUM_ENCODERS,\n","            dim_feed_forward=FEED_FORWARD_DIM,\n","            heads=HEADS).to(device)\n","\n","orig_state_dict = torch.load(model_path, map_location=device)\n","\n","stripped_state_dict = {\n","    k.replace(\"_orig_mod.\", \"\"): v for k, v in orig_state_dict.items()\n","}\n","\n","model.load_state_dict(stripped_state_dict)\n","\n","criterion = TraseLoss(total_var_weight=TOTAL_VAR_WEIGHT)\n","\n","model.eval()"],"metadata":{"id":"BKmO0p5M-I4f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749602494554,"user_tz":420,"elapsed":15861,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"4f01689d-c0c8-4346-bfc2-ac755b28acc7"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Trase(\n","  (linear1): Linear(in_features=408, out_features=2048, bias=True)\n","  (layer_norm1): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","  (activation1): GELU(approximate='none')\n","  (linear2): Linear(in_features=2048, out_features=2048, bias=True)\n","  (layer_norm2): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","  (activation2): GELU(approximate='none')\n","  (encoder): Encoder(\n","    (transformer_encoder): Encoder(\n","      (layers): ModuleList(\n","        (0): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (1): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","        (2): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (3): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","        (4): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (5): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","        (6): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (7): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","        (8): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (9): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","        (10): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): Attention(\n","            (to_q): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_k): Linear(in_features=2048, out_features=512, bias=False)\n","            (to_v): Linear(in_features=2048, out_features=512, bias=False)\n","            (split_q_heads): Rearrange('b n (h d) -> b h n d', h=8)\n","            (split_k_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (split_v_heads): Rearrange('b n (h d) -> b h n d', d=64)\n","            (merge_heads): Rearrange('b h n d -> b n (h d)')\n","            (attend): Attend(\n","              (attn_dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (to_out): Linear(in_features=512, out_features=2048, bias=False)\n","          )\n","          (2): Residual()\n","        )\n","        (11): ModuleList(\n","          (0): ModuleList(\n","            (0): LayerNorm(\n","              (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","            )\n","            (1-2): 2 x None\n","          )\n","          (1): FeedForward(\n","            (ff): Sequential(\n","              (0): Sequential(\n","                (0): Linear(in_features=2048, out_features=8192, bias=True)\n","                (1): GELU(approximate='none')\n","              )\n","              (1): Dropout(p=0.0, inplace=False)\n","              (2): Linear(in_features=8192, out_features=2048, bias=True)\n","            )\n","          )\n","          (2): Residual()\n","        )\n","      )\n","      (layer_integrators): ModuleList(\n","        (0-11): 12 x None\n","      )\n","      (rotary_pos_emb): RotaryEmbedding()\n","      (adaptive_mlp): Identity()\n","      (final_norm): LayerNorm(\n","        (ln): LayerNorm((2048,), eps=1e-05, elementwise_affine=False)\n","      )\n","      (skip_combines): ModuleList(\n","        (0-11): 12 x None\n","      )\n","    )\n","    (norm1): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","    (norm2): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","    (feed_forward): Sequential(\n","      (0): Linear(in_features=2048, out_features=8192, bias=True)\n","      (1): GELU(approximate='none')\n","      (2): Linear(in_features=8192, out_features=2048, bias=True)\n","    )\n","  )\n","  (linear3): Linear(in_features=2048, out_features=2048, bias=True)\n","  (layer_norm3): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","  (activation3): GELU(approximate='none')\n","  (noise_regressor): Noise_Regressor(\n","    (norm1): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)\n","    (hidden_state_to_noise_params): Linear(in_features=2048, out_features=864, bias=True)\n","    (kinematics_generator): PerIMUKinematicsGenerator()\n","  )\n",")"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["# Just checking if I uploaded the correct model"],"metadata":{"id":"7sG5i5HTGMwj"}},{"cell_type":"code","source":["curr_loss = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)\n","\n","    loss = criterion(kinematics=kinematics * mask * weights,\n","                    acc_mean = acc_output * mask * weights,\n","                    acc_std = acc_std * weights,\n","                    real_acc = real_acc * mask * weights,\n","                    gyro_mean = gyro_output,\n","                    gyro_std = gyro_std,\n","                    real_gyro = real_angular_vel,\n","                    include_gyro = real_angular_vel is not None)\n","\n","\n","    curr_loss += loss.item()\n","\n","print(curr_loss / len(dev_loader))"],"metadata":{"id":"yYuS6dAWBRmE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1749602512061,"user_tz":420,"elapsed":17505,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"36a78535-ee49-44c0-b2d1-38e4ce77dc94"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["-3.929862469434738\n"]}]},{"cell_type":"markdown","source":["## Are the accelerations and predicted spring kinematics doing what I designed them to do?\n"],"metadata":{"id":"OJKoKRjNG1lr"}},{"cell_type":"code","source":["def plot_time_series(series, title=\"Time Series Plot\", xlabel=\"Time\", ylabel=\"Value\", figsize=(12, 6)):\n","    plt.figure(figsize=figsize)\n","    plt.plot(series, label=\"Time Series\", color=\"blue\", linewidth=2)\n","    plt.title(title, fontsize=16)\n","    plt.xlabel(xlabel, fontsize=14)\n","    plt.ylabel(ylabel, fontsize=14)\n","    plt.grid(alpha=0.3, linestyle='--')\n","    # plt.ylim(-10, 10)\n","    plt.tight_layout()\n","    plt.legend(fontsize=12)\n","    plt.show()\n","\n","def plot_time_series_overlay(series_list, labels=None, title=\"Overlayed Time Series Plot\",\n","                              xlabel=\"Time\", ylabel=\"Value\", figsize=(12, 6),\n","                              colors=None, alpha=0.2, linewidth=2):\n","    \"\"\"\n","    Plots multiple time series with transparency to visualize overlaps.\n","\n","    Args:\n","        series_list (list of array-like): List of time series arrays to plot.\n","        labels (list of str, optional): Labels for each series.\n","        title (str): Plot title.\n","        xlabel (str): X-axis label.\n","        ylabel (str): Y-axis label.\n","        figsize (tuple): Figure size.\n","        colors (list of str, optional): List of colors for each series.\n","        alpha (float): Transparency of each time series line.\n","        linewidth (float): Width of the lines.\n","    \"\"\"\n","    plt.figure(figsize=figsize)\n","\n","    n = len(series_list)\n","    time = np.arange(len(series_list[0]))  # Assumes all series are same length\n","\n","    for i, series in enumerate(series_list):\n","        color = colors[i] if colors else None\n","        label = labels[i] if labels else None\n","        plt.plot(time, series, label=label, color=color, linewidth=linewidth, alpha=alpha)\n","\n","    if labels:\n","        plt.legend(fontsize=12)\n","\n","    plt.xlabel(xlabel, fontsize=14)\n","    plt.ylabel(ylabel, fontsize=14)\n","    plt.grid(alpha=0.3, linestyle='--')\n","    plt.tight_layout()\n","    plt.show()\n","\n","example_data = dev_dataset[1]\n","part = \"head\"\n","time_range = slice(2000, 2500)\n","\n","mocap_data = example_data[\"inputs\"]\n","real_acc = example_data[\"accelerations_output\"]\n","real_angular_vel = example_data[\"angular_velocities_output\"] if example_data[\"angular_velocities_output\"] is not None else None\n","mask = example_data[\"output_mask\"].T\n","weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)"],"metadata":{"id":"M0sx0LaoH4cW","executionInfo":{"status":"ok","timestamp":1749605388191,"user_tz":420,"elapsed":1450,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["axis_index = 1\n","acc_pred_vs_real = [acc_output.detach().cpu()[body_node_to_idx[part] * 3 + axis_index, time_range] + kinematics.detach().cpu()[body_node_to_idx[part] * 3 + axis_index, time_range],\n","                    real_acc.detach().cpu()[body_node_to_idx[part] * 3 + axis_index, time_range],\n","                    mocap_data.detach().cpu()[0, time_range, body_node_to_idx[part] * 17 + axis_index]\n","                    ]\n","plot_time_series_overlay(acc_pred_vs_real, labels=[\"Predicted\", \"Ground Truth\", \"Synthetic\"], ylabel=\"Acceelration\")"],"metadata":{"id":"hW1ghWvRN7FR","colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"status":"ok","timestamp":1749605421405,"user_tz":420,"elapsed":422,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"0d0aeff1-1905-4ae9-ac4c-7cf39da7a34b"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# prompt: Do the same thing that I did to plot the overlay graphs here using the same function but with the gyro output\n","\n","gyro_pred_vs_real = [gyro_output.detach().cpu()[body_node_to_idx[part] * 3 + 1, time_range],\n","                     real_angular_vel.detach().cpu()[body_node_to_idx[part] * 3 + 1, time_range],\n","                     mocap_data.detach().cpu()[0, time_range, body_node_to_idx[part] * 17 + 1 + 3]\n","                     ]\n","plot_time_series_overlay(gyro_pred_vs_real, labels=[\"Predicted\", \"Ground Truth\", \"Synthetic\"], ylabel=\"Angular Velocity\")\n"],"metadata":{"id":"5PXHgCPxKNIL","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"error","timestamp":1749602515885,"user_tz":420,"elapsed":7,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"dd018b7d-9ba0-4327-e0ed-b524727b6d3f"},"execution_count":9,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'NoneType' object has no attribute 'detach'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-4028901442>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m gyro_pred_vs_real = [gyro_output.detach().cpu()[body_node_to_idx[part] * 3 + 1, time_range],\n\u001b[0;32m----> 4\u001b[0;31m                      \u001b[0mreal_angular_vel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbody_node_to_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpart\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime_range\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m                      \u001b[0mmocap_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtime_range\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody_node_to_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpart\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m17\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                      ]\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'detach'"]}]},{"cell_type":"markdown","source":["# Trase Model Performance"],"metadata":{"id":"blrHBndVP0rm"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    kinematics, acc_output, acc_std, gyro_output, gyro_std = model(mocap_data)\n","\n","    acc_pred = (acc_output.detach() + kinematics.detach()) * mask\n","    acc_pred = acc_pred.cpu().numpy()\n","\n","    real_acc = real_acc * mask\n","    real_acc = real_acc.cpu().numpy()\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = gyro_output.detach().cpu().numpy()\n","        real_gyro = real_angular_vel.detach().cpu().numpy()\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")\n"],"metadata":{"id":"Cyh0exQd__Uu","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"error","timestamp":1749605335775,"user_tz":420,"elapsed":20454,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}},"outputId":"a3b8a04e-5dad-4956-a9fe-2d6baf0aefc9"},"execution_count":25,"outputs":[{"output_type":"error","ename":"ZeroDivisionError","evalue":"division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-2259052658>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m   \u001b[0macc_mse\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0macc_exps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m   \u001b[0mgyro_mse\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mgyro_exps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Acceleration MSE {acc_mse}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"markdown","source":["# Nothing but a central difference"],"metadata":{"id":"4zz2-jijP71L"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","\n","    acc_pred = mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T\n","    acc_pred = acc_pred.cpu().numpy()\n","\n","    real_acc = real_acc * mask\n","    real_acc = real_acc.cpu().numpy()\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy()\n","        real_gyro = real_angular_vel.detach().cpu().numpy()\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")"],"metadata":{"id":"xpK894NFFTW5","executionInfo":{"status":"aborted","timestamp":1749605335773,"user_tz":420,"elapsed":8342,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Butterworth Filter"],"metadata":{"id":"wRfmdGlOQDQB"}},{"cell_type":"code","source":["acc_mse = 0\n","gyro_mse = 0\n","acc_exps = 0\n","gyro_exps = 0\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","\n","    acc_pred = filtfilt(b, a, mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T.detach().cpu().numpy())\n","\n","    real_acc = real_acc * mask\n","    real_acc = filtfilt(b, a, real_acc.cpu().numpy())\n","\n","    acc_diff = acc_pred - real_acc\n","    acc_sq = acc_diff ** 2\n","\n","    acc_exps += acc_sq.size\n","    acc_mse += np.sum(acc_sq)\n","\n","    if real_angular_vel is not None:\n","        gyro_pred = filtfilt(b, a, mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy())\n","        real_gyro = filtfilt(b, a, real_angular_vel.detach().cpu().numpy())\n","\n","        diff = gyro_pred - real_gyro\n","        sq = diff ** 2\n","\n","        gyro_exps += sq.size\n","\n","        gyro_mse += np.sum(sq)\n","\n","  acc_mse /= acc_exps\n","  gyro_mse /= gyro_exps\n","\n","  print(f\"Acceleration MSE {acc_mse}\")\n","  print(f\"Angular Velocity MSE {gyro_mse}\")"],"metadata":{"id":"Qo5TBSFwMVGz","executionInfo":{"status":"aborted","timestamp":1749605335777,"user_tz":420,"elapsed":8345,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Exponential Moving average and Savitsky Golay Filter"],"metadata":{"id":"RvqQwymxRDQs"}},{"cell_type":"code","source":["# prompt: Do the same thing as above for a savitsky golay filter and and an exponential moving average with a window of 11 to calculate the mean squared error. Be sure to apply the filter to both synthetic and real data\n","\n","from scipy.signal import savgol_filter\n","\n","def exponential_moving_average(data, window_size):\n","  \"\"\"Calculates the Exponential Moving Average of a time series.\"\"\"\n","  ema = np.zeros_like(data)\n","  alpha = 2 / (window_size + 1)\n","  ema[0] = data[0]\n","  for i in range(1, len(data)):\n","    ema[i] = alpha * data[i] + (1 - alpha) * ema[i - 1]\n","  return ema\n","\n","# Exponential Moving Average and Savitsky Golay Filter\n","acc_mse_ema = 0\n","gyro_mse_ema = 0\n","acc_exps_ema = 0\n","gyro_exps_ema = 0\n","\n","acc_mse_savgol = 0\n","gyro_mse_savgol = 0\n","acc_exps_savgol = 0\n","gyro_exps_savgol = 0\n","\n","window_size = 11\n","savgol_window = 11 # Must be odd\n","savgol_polyorder = 2\n","\n","with torch.no_grad():\n","  for data in dev_loader:\n","    data = data[0]\n","    mocap_data = data[\"inputs\"]\n","    real_acc = data[\"accelerations_output\"]\n","    real_angular_vel = data[\"angular_velocities_output\"] if data[\"angular_velocities_output\"] is not None else None\n","    mask = data[\"output_mask\"].T\n","    weights = data[\"weights\"].T.repeat_interleave(3, dim=0)\n","\n","    # Apply EMA to synthetic data (from mocap_data)\n","    synthetic_acc = mocap_data[0].reshape(-1, 24, 17)[:, :, 1:4].reshape(-1, 72).T.detach().cpu().numpy()\n","    ema_acc_pred = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=synthetic_acc)\n","\n","    # Apply EMA to real data\n","    real_acc_masked = real_acc * mask\n","    real_acc_masked_np = real_acc_masked.cpu().numpy()\n","    # We need to handle the masked values correctly for EMA. A simple approach\n","    # is to only calculate EMA for unmasked sections, but for simplicity here\n","    # we'll apply to the potentially masked data. A more sophisticated approach\n","    # might involve splitting into unmasked segments.\n","    ema_real_acc = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=real_acc_masked_np)\n","\n","    # Calculate MSE for EMA\n","    acc_diff_ema = ema_acc_pred - ema_real_acc\n","    acc_sq_ema = acc_diff_ema ** 2\n","\n","    acc_exps_ema += acc_sq_ema.size\n","    acc_mse_ema += np.sum(acc_sq_ema)\n","\n","    if real_angular_vel is not None:\n","        synthetic_gyro = mocap_data[0].reshape(-1, 24, 17)[:, :, 4:7].reshape(-1, 72).T.detach().cpu().numpy()\n","        ema_gyro_pred = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=synthetic_gyro)\n","\n","        real_gyro_np = real_angular_vel.detach().cpu().numpy()\n","        ema_real_gyro = np.apply_along_axis(lambda row: exponential_moving_average(row, window_size), axis=1, arr=real_gyro_np)\n","\n","        diff_ema = ema_gyro_pred - ema_real_gyro\n","        sq_ema = diff_ema ** 2\n","\n","        gyro_exps_ema += sq_ema.size\n","        gyro_mse_ema += np.sum(sq_ema)\n","\n","    # Apply Savitsky Golay to synthetic data\n","    savgol_acc_pred = savgol_filter(synthetic_acc, savgol_window, savgol_polyorder, axis=1)\n","\n","    # Apply Savitsky Golay to real data\n","    # Savgol_filter handles NaN values if present, which might occur due to masking.\n","    savgol_real_acc = savgol_filter(real_acc_masked_np, savgol_window, savgol_polyorder, axis=1)\n","\n","    # Calculate MSE for Savitsky Golay\n","    acc_diff_savgol = savgol_acc_pred - savgol_real_acc\n","    acc_sq_savgol = acc_diff_savgol ** 2\n","\n","    acc_exps_savgol += acc_sq_savgol.size\n","    acc_mse_savgol += np.sum(acc_sq_savgol)\n","\n","    if real_angular_vel is not None:\n","        savgol_gyro_pred = savgol_filter(synthetic_gyro, savgol_window, savgol_polyorder, axis=1)\n","        savgol_real_gyro = savgol_filter(real_gyro_np, savgol_window, savgol_polyorder, axis=1)\n","\n","        diff_savgol = savgol_gyro_pred - savgol_real_gyro\n","        sq_savgol = diff_savgol ** 2\n","\n","        gyro_exps_savgol += sq_savgol.size\n","        gyro_mse_savgol += np.sum(sq_savgol)\n","\n","acc_mse_ema /= acc_exps_ema\n","gyro_mse_ema /= gyro_exps_ema\n","\n","acc_mse_savgol /= acc_exps_savgol\n","gyro_mse_savgol /= gyro_exps_savgol\n","\n","\n","print(f\"EMA Acceleration MSE {acc_mse_ema}\")\n","print(f\"EMA Angular Velocity MSE {gyro_mse_ema}\")\n","print(f\"Savitsky Golay Acceleration MSE {acc_mse_savgol}\")\n","print(f\"Savitsky Golay Angular Velocity MSE {gyro_mse_savgol}\")"],"metadata":{"id":"7oenbDsqX2d2","executionInfo":{"status":"aborted","timestamp":1749605335778,"user_tz":420,"elapsed":8345,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: get the correlation coefficients for the gyro to real and acc pred to real acc\n","\n","from scipy.stats import pearsonr\n","\n","# Assuming acc_pred_vs_real and gyro_pred_vs_real are lists of numpy arrays or tensors\n","# and the first element is the predicted series, the second is the real series.\n","\n","# Calculate correlation for acc pred vs real acc\n","acc_pred = acc_pred_vs_real[0].squeeze() # Ensure 1D\n","real_acc_series = acc_pred_vs_real[1].squeeze() # Ensure 1D\n","\n","# Ensure both series are the same length\n","min_len = min(len(acc_pred), len(real_acc_series))\n","acc_pred = acc_pred[:min_len]\n","real_acc_series = real_acc_series[:min_len]\n","\n","\n","# Handle potential NaN or inf values\n","valid_indices_acc = np.isfinite(acc_pred) & np.isfinite(real_acc_series)\n","acc_pred_valid = acc_pred[valid_indices_acc]\n","real_acc_series_valid = real_acc_series[valid_indices_acc]\n","\n","if len(acc_pred_valid) > 1:\n","    correlation_acc, _ = pearsonr(acc_pred_valid, real_acc_series_valid)\n","    print(f\"Correlation coefficient (Acc Pred vs Real Acc): {correlation_acc}\")\n","else:\n","    print(\"Cannot compute correlation for Acc Pred vs Real Acc: Not enough valid data points.\")\n","\n","\n","# Calculate correlation for gyro pred vs real gyro\n","if real_angular_vel is not None:\n","    gyro_pred = gyro_pred_vs_real[0].squeeze() # Ensure 1D\n","    real_gyro_series = gyro_pred_vs_real[1].squeeze() # Ensure 1D\n","\n","    # Ensure both series are the same length\n","    min_len = min(len(gyro_pred), len(real_gyro_series))\n","    gyro_pred = gyro_pred[:min_len]\n","    real_gyro_series = real_gyro_series[:min_len]\n","\n","    # Handle potential NaN or inf values\n","    valid_indices_gyro = np.isfinite(gyro_pred) & np.isfinite(real_gyro_series)\n","    gyro_pred_valid = gyro_pred[valid_indices_gyro]\n","    real_gyro_series_valid = real_gyro_series[valid_indices_gyro]\n","\n","    if len(gyro_pred_valid) > 1:\n","        correlation_gyro, _ = pearsonr(gyro_pred_valid, real_gyro_series_valid)\n","        print(f\"Correlation coefficient (Gyro Pred vs Real Gyro): {correlation_gyro}\")\n","    else:\n","         print(\"Cannot compute correlation for Gyro Pred vs Real Gyro: Not enough valid data points.\")\n","else:\n","    print(\"Real angular velocity data is not available, cannot compute gyro correlation.\")\n","\n"],"metadata":{"id":"el_6UIF1LzJZ","executionInfo":{"status":"aborted","timestamp":1749605335779,"user_tz":420,"elapsed":8345,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: print the mean of gyro std and acc std\n","\n","mean_acc_std = torch.mean(acc_std)\n","mean_gyro_std = torch.mean(gyro_std)\n","\n","print(f\"Mean of acceleration std: {mean_acc_std.item()}\")\n","print(f\"Mean of gyroscope std: {mean_gyro_std.item()}\")\n"],"metadata":{"id":"pI6AgeN4M6PX","executionInfo":{"status":"aborted","timestamp":1749605335782,"user_tz":420,"elapsed":8347,"user":{"displayName":"Jayson Meribe","userId":"18347816154755748104"}}},"execution_count":null,"outputs":[]}]}